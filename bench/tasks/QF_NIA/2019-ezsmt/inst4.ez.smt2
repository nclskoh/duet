(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source |
Generated by: Da Shen, Yuliya Lierler
Generated on: 2019-04-29
Generator: EZSMT+
Application: SMT-based Constraint Answer Set Solver EZSMT+ for Non-tight Programs [1]

[1] Da Shen and Yuliya Lierler. "SMT-based Constraint Answer Set Solver EZSMT+ for Non-tight Programs"
    16th International Conference on Principles of Knowledge Representation and Reasoning (2018)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; --- END HEADER ---

; --- Including necessary SMT functions ---

(define-fun max ((x Int) (y Int)) Int
  (ite (< x y) y x))

(define-fun min ((x Int) (y Int)) Int
  (ite (< x y) x y))

; --- END INCLUDES ---

(declare-fun |step(1)| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(decelerate,0)),0))| () Bool)
(declare-fun |required(ezcsp__lt(v(v,0),4))| () Bool)
(declare-fun |holds(running,0)| () Bool)
(declare-fun |instantaneous(decelerate)| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(accelerate,2)),end(2)))| () Bool)
(declare-fun |cspvar(stime(moving),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(decelerate,2)),end(2)))| () Bool)
(declare-fun |required(ezcsp__geq(stime(moving),0))| () Bool)
(declare-fun |required(ezcsp__geq(end(2),start(2)))| () Bool)
(declare-fun |required(ezcsp__eq(v(v,2),ezcsp__mn(v(v,1),1)))| () Bool)
(declare-fun |required(ezcsp__geq(end(1),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(accelerate,0)),0))| () Bool)
(declare-fun |cspvar(adur(iact(decelerate,3)),0,30)| () Bool)
(declare-fun |some_action(3)| () Bool)
(declare-fun |cspvar(stime(iact(accelerate,2)),0,30)| () Bool)
(declare-fun |cspvar(stime(iact(accelerate,1)),0,30)| () Bool)
(declare-fun |cspvar(adur(iact(decelerate,0)),0,30)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,1),ezcsp__mn(v(v,0),1)))| () Bool)
(declare-fun |uplimit(4)| () Bool)
(declare-fun |cspvar(stime(iact(decelerate,1)),0,30)| () Bool)
(declare-fun |instoccurs(iact(accelerate,1),1)| () Bool)
(declare-fun |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))| () Bool)
(declare-fun |cspvar(v_initial(d,0),0,1000)| () Bool)
(declare-fun |cspvar(dur(0),0,30)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,1),0))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,1),30))| () Bool)
(declare-fun |instoccurs(iact(decelerate,2),2)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,0),0))| () Bool)
(declare-fun |some_action(2)| () Bool)
(declare-fun |required(ezcsp__geq(end(0),start(0)))| () Bool)
(declare-fun |cspvar(v_final(d,1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,1),ezcsp__pl(v_initial(d,1),ezcsp__tm(ezcsp__mn(end(1),start(1)),v(v,1)))))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,3),ezcsp__pl(v_initial(d,3),ezcsp__tm(ezcsp__mn(end(3),start(3)),v(v,3)))))| () Bool)
(declare-fun |hold_s(inprogr(moving),2)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(d,3),v_final(d,2)))| () Bool)
(declare-fun |ab(v,3)| () Bool)
(declare-fun |required(ezcsp__eq(adur(moving),ezcsp__mn(end(2),end(0))))| () Bool)
(declare-fun |cspvar(start(2),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(accelerate,3)),0))| () Bool)
(declare-fun |cspvar(stime(iact(accelerate,0)),0,30)| () Bool)
(declare-fun |cspvar(adur(iact(decelerate,1)),0,30)| () Bool)
(declare-fun |174| () Bool)
(declare-fun |occurs(accelerate,2)| () Bool)
(declare-fun |required(ezcsp__geq(end(3),0))| () Bool)
(declare-fun |cspvar(stime(iact(decelerate,2)),0,30)| () Bool)
(declare-fun |required(ezcsp__geq(start(3),0))| () Bool)
(declare-fun |cspvar(adur(iact(accelerate,1)),0,30)| () Bool)
(declare-fun |fluent(inprogr(moving))| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(accelerate,1)),end(1)))| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(decelerate,3)),0))| () Bool)
(declare-fun |required(ezcsp__gt(v(v,3),0))| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(accelerate,3)),end(3)))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,2),30))| () Bool)
(declare-fun |occurs(decelerate,3)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,3),ezcsp__pl(v(v,2),1)))| () Bool)
(declare-fun |required(ezcsp__eq(v(v,1),v(v,0)))| () Bool)
(declare-fun |required(ezcsp__eq(v(v,2),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(moving),ezcsp__mn(end(1),end(0))))| () Bool)
(declare-fun |cspvar(dur(3),0,30)| () Bool)
(declare-fun |cspvar(stime(iact(decelerate,3)),0,30)| () Bool)
(declare-fun |hold_s(inprogr(moving),3)| () Bool)
(declare-fun |ab(v,2)| () Bool)
(declare-fun |required(ezcsp__eq(start(0),0))| () Bool)
(declare-fun |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))| () Bool)
(declare-fun |instoccurs(iact(accelerate,0),0)| () Bool)
(declare-fun |action(end(moving))| () Bool)
(declare-fun |occurs(start(moving),0)| () Bool)
(declare-fun |cspvar(adur(iact(decelerate,2)),0,30)| () Bool)
(declare-fun |cspvar(stime(iact(accelerate,3)),0,30)| () Bool)
(declare-fun |required(ezcsp__geq(start(1),0))| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(d,0),0))| () Bool)
(declare-fun |occurs(accelerate,3)| () Bool)
(declare-fun |duration(moving,30)| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(decelerate,1)),0))| () Bool)
(declare-fun |cspvar(end(0),0,1000)| () Bool)
(declare-fun |34| () Bool)
(declare-fun |cspvar(end(3),0,1000)| () Bool)
(declare-fun |action(accelerate)| () Bool)
(declare-fun |required(ezcsp__lt(v(v,1),4))| () Bool)
(declare-fun |action(start(moving))| () Bool)
(declare-fun |required(ezcsp__eq(stime(moving),end(0)))| () Bool)
(declare-fun |cspvar(v_initial(d,2),0,1000)| () Bool)
(declare-fun |occurs(decelerate,2)| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(decelerate,1)),end(1)))| () Bool)
(declare-fun |cspvar(start(3),0,1000)| () Bool)
(declare-fun |ab(v,1)| () Bool)
(declare-fun |cspvar(adur(iact(accelerate,0)),0,30)| () Bool)
(declare-fun |178| () Bool)
(declare-fun |177| () Bool)
(declare-fun |176| () Bool)
(declare-fun |175| () Bool)
(declare-fun |required(ezcsp__lt(v(v,3),4))| () Bool)
(declare-fun |173| () Bool)
(declare-fun |172| () Bool)
(declare-fun |171| () Bool)
(declare-fun |action(decelerate)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,3),ezcsp__mn(v(v,2),1)))| () Bool)
(declare-fun |occurs(accelerate,0)| () Bool)
(declare-fun |required(ezcsp__lt(v(v,2),4))| () Bool)
(declare-fun |occurs(end(moving),2)| () Bool)
(declare-fun |maxintval(30)| () Bool)
(declare-fun |cspvar(v_final(d,3),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(end(2),0))| () Bool)
(declare-fun |occurs(decelerate,1)| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(accelerate,1)),0))| () Bool)
(declare-fun |cspvar(v(v,0),0,1000)| () Bool)
(declare-fun |downlimit(0)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,2),ezcsp__pl(v(v,1),1)))| () Bool)
(declare-fun |cspvar(adur(moving),0,30)| () Bool)
(declare-fun |required(ezcsp__gt(v(v,2),0))| () Bool)
(declare-fun |required(ezcsp__gt(v(v,0),0))| () Bool)
(declare-fun |cspvar(v(v,1),0,1000)| () Bool)
(declare-fun |164| () Bool)
(declare-fun |165| () Bool)
(declare-fun |166| () Bool)
(declare-fun |occurs(accelerate,1)| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(decelerate,2)),0))| () Bool)
(declare-fun |163| () Bool)
(declare-fun |holds(inprogr(moving),1)| () Bool)
(declare-fun |required(ezcsp__geq(end(3),start(3)))| () Bool)
(declare-fun |instoccurs(iact(decelerate,3),3)| () Bool)
(declare-fun |occurs(end(moving),1)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(d,2),v_final(d,1)))| () Bool)
(declare-fun |cspvar(v_initial(d,3),0,1000)| () Bool)
(declare-fun |some_action(0)| () Bool)
(declare-fun |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,0),ezcsp__pl(v_initial(d,0),ezcsp__tm(ezcsp__mn(end(0),start(0)),v(v,0)))))| () Bool)
(declare-fun |cspvar(adur(iact(accelerate,2)),0,30)| () Bool)
(declare-fun |instantaneous(accelerate)| () Bool)
(declare-fun |cspvar(end(2),0,1000)| () Bool)
(declare-fun |cspvar(dur(2),0,30)| () Bool)
(declare-fun |step(3)| () Bool)
(declare-fun |instoccurs(iact(accelerate,2),2)| () Bool)
(declare-fun |required(ezcsp__geq(start(2),0))| () Bool)
(declare-fun |cspvar(start(0),0,1000)| () Bool)
(declare-fun |cspvar(v(v,3),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(end(1),start(1)))| () Bool)
(declare-fun |cspvar(v_final(d,2),0,1000)| () Bool)
(declare-fun |cspdomain(fd)| () Bool)
(declare-fun |hold_s(inprogr(moving),0)| () Bool)
(declare-fun |holds(inprogr(moving),2)| () Bool)
(declare-fun |some_action(1)| () Bool)
(declare-fun |ab(v,0)| () Bool)
(declare-fun |cspvar(adur(iact(accelerate,3)),0,30)| () Bool)
(declare-fun |required(ezcsp__eq(start(1),end(0)))| () Bool)
(declare-fun |instoccurs(iact(accelerate,3),3)| () Bool)
(declare-fun |step(2)| () Bool)
(declare-fun |hold_s(running,2)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(d,1),v_final(d,0)))| () Bool)
(declare-fun |step(0)| () Bool)
(declare-fun |instoccurs(iact(decelerate,0),0)| () Bool)
(declare-fun |cspvar(stime(iact(decelerate,0)),0,30)| () Bool)
(declare-fun |required(ezcsp__eq(v_final(d,2),ezcsp__pl(v_initial(d,2),ezcsp__tm(ezcsp__mn(end(2),start(2)),v(v,2)))))| () Bool)
(declare-fun |instoccurs(iact(decelerate,1),1)| () Bool)
(declare-fun |cspvar(start(1),0,1000)| () Bool)
(declare-fun |cspvar(v(v,2),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(start(0),0))| () Bool)
(declare-fun |required(ezcsp__gt(v(v,1),0))| () Bool)
(declare-fun |required(ezcsp__eq(start(3),end(2)))| () Bool)
(declare-fun |cspvar(v_final(d,0),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,3),v(v,2)))| () Bool)
(declare-fun |maction(moving)| () Bool)
(declare-fun |cspvar(dur(1),0,30)| () Bool)
(declare-fun |cspvar(v_initial(d,1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(decelerate,3)),end(3)))| () Bool)
(declare-fun |required(ezcsp__geq(end(0),0))| () Bool)
(declare-fun |holds(inprogr(moving),3)| () Bool)
(declare-fun |hold_s(running,3)| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(decelerate,0)),end(0)))| () Bool)
(declare-fun |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))| () Bool)
(declare-fun |required(ezcsp__eq(stime(iact(accelerate,0)),end(0)))| () Bool)
(declare-fun |cspvar(end(1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(start(2),end(1)))| () Bool)
(declare-fun |required(ezcsp__eq(v(v,1),ezcsp__pl(v(v,0),1)))| () Bool)
(declare-fun |occurs(decelerate,0)| () Bool)
(declare-fun |required(ezcsp__eq(v(v,2),v(v,1)))| () Bool)
(declare-fun |required(ezcsp__eq(adur(iact(accelerate,2)),0))| () Bool)
(assert (or (not |occurs(end(moving),1)|) |hold_s(inprogr(moving),2)|))
(assert (or |holds(inprogr(moving),2)| |hold_s(inprogr(moving),2)|))
(assert (or (not |178|) |hold_s(inprogr(moving),3)|))
(assert (or (not |occurs(end(moving),2)|) |hold_s(inprogr(moving),3)|))
(assert (or (not |holds(inprogr(moving),2)|) |holds(inprogr(moving),3)| |hold_s(inprogr(moving),3)|))
(assert (or (not |occurs(end(moving),1)|) |hold_s(running,2)|))
(assert (or (not |occurs(end(moving),1)|) |occurs(end(moving),1)|))
(assert (or (not |occurs(end(moving),2)|) |hold_s(running,3)|))
(assert (or (not |occurs(end(moving),2)|) |occurs(end(moving),2)|))
(assert (or (not |hold_s(running,2)|) (not |occurs(accelerate,2)|)))
(assert (or (not |hold_s(running,3)|) (not |occurs(accelerate,3)|)))
(assert (or (not |hold_s(running,2)|) (not |occurs(decelerate,2)|)))
(assert (or (not |hold_s(running,3)|) (not |occurs(decelerate,3)|)))
(assert (or (not |hold_s(inprogr(moving),2)|) (not |occurs(end(moving),2)|)))
(assert (or (not |occurs(end(moving),1)|) (not |occurs(accelerate,1)|)))
(assert (or (not |occurs(end(moving),1)|) (not |occurs(decelerate,1)|)))
(assert (or (not |occurs(end(moving),2)|) (not |occurs(accelerate,2)|)))
(assert (or (not |occurs(end(moving),2)|) (not |occurs(decelerate,2)|)))
(assert (or (not |occurs(end(moving),1)|) (not |occurs(end(moving),2)|)))
(assert (or (not |occurs(accelerate,0)|) (not |occurs(decelerate,0)|)))
(assert (or (not |occurs(accelerate,1)|) (not |occurs(decelerate,1)|)))
(assert (or (not |occurs(accelerate,2)|) (not |occurs(decelerate,2)|)))
(assert (or (not |occurs(accelerate,3)|) (not |occurs(decelerate,3)|)))
(assert (or (not |occurs(accelerate,2)|) |occurs(accelerate,2)|))
(assert (or (not |occurs(accelerate,3)|) |occurs(accelerate,3)|))
(assert (or (not |occurs(accelerate,0)|) |required(ezcsp__lt(v(v,0),4))|))
(assert (or (not |occurs(accelerate,0)|) |occurs(accelerate,0)|))
(assert (or (not |occurs(accelerate,1)|) |required(ezcsp__lt(v(v,1),4))|))
(assert (or (not |occurs(accelerate,1)|) |occurs(accelerate,1)|))
(assert (or (not |occurs(accelerate,2)|) |required(ezcsp__lt(v(v,2),4))|))
(assert (or (not |occurs(accelerate,3)|) |required(ezcsp__lt(v(v,3),4))|))
(assert (or (not |occurs(accelerate,0)|) |required(ezcsp__eq(v(v,1),ezcsp__pl(v(v,0),1)))|))
(assert (or (not |occurs(accelerate,1)|) |required(ezcsp__eq(v(v,2),ezcsp__pl(v(v,1),1)))|))
(assert (or (not |occurs(accelerate,2)|) |required(ezcsp__eq(v(v,3),ezcsp__pl(v(v,2),1)))|))
(assert (or (not |occurs(accelerate,0)|) |ab(v,0)|))
(assert (or (not |occurs(decelerate,0)|) |ab(v,0)|))
(assert (or (not |occurs(accelerate,1)|) |ab(v,1)|))
(assert (or (not |occurs(decelerate,1)|) |ab(v,1)|))
(assert (or (not |occurs(accelerate,2)|) |ab(v,2)|))
(assert (or (not |occurs(decelerate,2)|) |ab(v,2)|))
(assert (or (not |occurs(accelerate,3)|) |ab(v,3)|))
(assert (or (not |occurs(decelerate,3)|) |ab(v,3)|))
(assert (or (not |occurs(decelerate,2)|) |occurs(decelerate,2)|))
(assert (or (not |occurs(decelerate,3)|) |occurs(decelerate,3)|))
(assert (or (not |occurs(decelerate,0)|) |required(ezcsp__gt(v(v,0),0))|))
(assert (or (not |occurs(decelerate,0)|) |occurs(decelerate,0)|))
(assert (or (not |occurs(decelerate,1)|) |required(ezcsp__gt(v(v,1),0))|))
(assert (or (not |occurs(decelerate,1)|) |occurs(decelerate,1)|))
(assert (or (not |occurs(decelerate,2)|) |required(ezcsp__gt(v(v,2),0))|))
(assert (or (not |occurs(decelerate,3)|) |required(ezcsp__gt(v(v,3),0))|))
(assert (or (not |occurs(decelerate,0)|) |required(ezcsp__eq(v(v,1),ezcsp__mn(v(v,0),1)))|))
(assert (or (not |occurs(decelerate,1)|) |required(ezcsp__eq(v(v,2),ezcsp__mn(v(v,1),1)))|))
(assert (or (not |occurs(decelerate,2)|) |required(ezcsp__eq(v(v,3),ezcsp__mn(v(v,2),1)))|))
(assert (or |required(ezcsp__eq(v(v,1),v(v,0)))| |ab(v,0)|))
(assert (or |required(ezcsp__eq(v(v,2),v(v,1)))| |ab(v,1)|))
(assert (or |required(ezcsp__eq(v(v,3),v(v,2)))| |ab(v,2)|))
(assert (or (not |occurs(end(moving),1)|) |required(ezcsp__eq(v_final(d,1),30))|))
(assert (or (not |occurs(end(moving),2)|) |required(ezcsp__eq(v_final(d,2),30))|))
(assert (or (not |occurs(end(moving),1)|) |required(ezcsp__eq(v(v,1),0))|))
(assert (or (not |occurs(end(moving),2)|) |required(ezcsp__eq(v(v,2),0))|))
(assert (or (not |occurs(end(moving),1)|) |cspvar(adur(moving),0,30)|))
(assert (or (not |occurs(end(moving),2)|) |cspvar(adur(moving),0,30)|))
(assert (or (not |occurs(end(moving),1)|) |required(ezcsp__eq(adur(moving),ezcsp__mn(end(1),end(0))))|))
(assert (or (not |occurs(end(moving),2)|) |required(ezcsp__eq(adur(moving),ezcsp__mn(end(2),end(0))))|))
(assert (or (not |occurs(accelerate,0)|) |instoccurs(iact(accelerate,0),0)|))
(assert (or (not |occurs(accelerate,1)|) |instoccurs(iact(accelerate,1),1)|))
(assert (or (not |occurs(accelerate,2)|) |instoccurs(iact(accelerate,2),2)|))
(assert (or (not |occurs(accelerate,3)|) |instoccurs(iact(accelerate,3),3)|))
(assert (or (not |occurs(decelerate,0)|) |instoccurs(iact(decelerate,0),0)|))
(assert (or (not |occurs(decelerate,1)|) |instoccurs(iact(decelerate,1),1)|))
(assert (or (not |occurs(decelerate,2)|) |instoccurs(iact(decelerate,2),2)|))
(assert (or (not |occurs(decelerate,3)|) |instoccurs(iact(decelerate,3),3)|))
(assert (or (not |occurs(accelerate,0)|) |cspvar(adur(iact(accelerate,0)),0,30)|))
(assert (or (not |occurs(accelerate,1)|) |cspvar(adur(iact(accelerate,1)),0,30)|))
(assert (or (not |occurs(accelerate,2)|) |cspvar(adur(iact(accelerate,2)),0,30)|))
(assert (or (not |occurs(accelerate,3)|) |cspvar(adur(iact(accelerate,3)),0,30)|))
(assert (or (not |occurs(decelerate,0)|) |cspvar(adur(iact(decelerate,0)),0,30)|))
(assert (or (not |occurs(decelerate,1)|) |cspvar(adur(iact(decelerate,1)),0,30)|))
(assert (or (not |occurs(decelerate,2)|) |cspvar(adur(iact(decelerate,2)),0,30)|))
(assert (or (not |occurs(decelerate,3)|) |cspvar(adur(iact(decelerate,3)),0,30)|))
(assert (or (not |occurs(accelerate,0)|) |cspvar(stime(iact(accelerate,0)),0,30)|))
(assert (or (not |occurs(accelerate,1)|) |cspvar(stime(iact(accelerate,1)),0,30)|))
(assert (or (not |occurs(accelerate,2)|) |cspvar(stime(iact(accelerate,2)),0,30)|))
(assert (or (not |occurs(accelerate,3)|) |cspvar(stime(iact(accelerate,3)),0,30)|))
(assert (or (not |occurs(decelerate,0)|) |cspvar(stime(iact(decelerate,0)),0,30)|))
(assert (or (not |occurs(decelerate,1)|) |cspvar(stime(iact(decelerate,1)),0,30)|))
(assert (or (not |occurs(decelerate,2)|) |cspvar(stime(iact(decelerate,2)),0,30)|))
(assert (or (not |occurs(decelerate,3)|) |cspvar(stime(iact(decelerate,3)),0,30)|))
(assert (or (not |occurs(accelerate,0)|) |required(ezcsp__eq(adur(iact(accelerate,0)),0))|))
(assert (or (not |occurs(accelerate,1)|) |required(ezcsp__eq(adur(iact(accelerate,1)),0))|))
(assert (or (not |occurs(accelerate,2)|) |required(ezcsp__eq(adur(iact(accelerate,2)),0))|))
(assert (or (not |occurs(accelerate,3)|) |required(ezcsp__eq(adur(iact(accelerate,3)),0))|))
(assert (or (not |occurs(decelerate,0)|) |required(ezcsp__eq(adur(iact(decelerate,0)),0))|))
(assert (or (not |occurs(decelerate,1)|) |required(ezcsp__eq(adur(iact(decelerate,1)),0))|))
(assert (or (not |occurs(decelerate,2)|) |required(ezcsp__eq(adur(iact(decelerate,2)),0))|))
(assert (or (not |occurs(decelerate,3)|) |required(ezcsp__eq(adur(iact(decelerate,3)),0))|))
(assert (or (not |occurs(accelerate,0)|) |required(ezcsp__eq(stime(iact(accelerate,0)),end(0)))|))
(assert (or (not |occurs(accelerate,1)|) |required(ezcsp__eq(stime(iact(accelerate,1)),end(1)))|))
(assert (or (not |occurs(accelerate,2)|) |required(ezcsp__eq(stime(iact(accelerate,2)),end(2)))|))
(assert (or (not |occurs(accelerate,3)|) |required(ezcsp__eq(stime(iact(accelerate,3)),end(3)))|))
(assert (or (not |occurs(decelerate,0)|) |required(ezcsp__eq(stime(iact(decelerate,0)),end(0)))|))
(assert (or (not |occurs(decelerate,1)|) |required(ezcsp__eq(stime(iact(decelerate,1)),end(1)))|))
(assert (or (not |occurs(decelerate,2)|) |required(ezcsp__eq(stime(iact(decelerate,2)),end(2)))|))
(assert (or (not |occurs(decelerate,3)|) |required(ezcsp__eq(stime(iact(decelerate,3)),end(3)))|))
(assert (or (not |occurs(end(moving),1)|) |164|))
(assert (or (not |occurs(accelerate,1)|) |164|))
(assert (or (not |occurs(decelerate,1)|) |164|))
(assert (or (not |occurs(end(moving),2)|) |165|))
(assert (or (not |occurs(accelerate,2)|) |165|))
(assert (or (not |occurs(decelerate,2)|) |165|))
(assert (or (not |occurs(accelerate,3)|) |166|))
(assert (or (not |occurs(decelerate,3)|) |166|))
(assert (or (not |164|) |some_action(1)|))
(assert (or (not |165|) |some_action(2)|))
(assert (or (not |166|) |some_action(3)|))
(assert (or (not |occurs(end(moving),1)|) |171|))
(assert (or (not |occurs(end(moving),2)|) |171|))
(assert (or (not |171|) |172|))
(assert (or (not |hold_s(inprogr(moving),2)|) |occurs(end(moving),1)|))
(assert (or (not |holds(inprogr(moving),2)|) (not |hold_s(inprogr(moving),2)|)))
(assert (or (not |178|) |hold_s(inprogr(moving),2)|))
(assert (or (not |178|) (not |holds(inprogr(moving),3)|)))
(assert (or (not |hold_s(inprogr(moving),2)|) |178| |holds(inprogr(moving),3)|))
(assert (or (not |hold_s(inprogr(moving),3)|) |178| |occurs(end(moving),2)|))
(assert (or (not |holds(inprogr(moving),3)|) |holds(inprogr(moving),2)|))
(assert (or (not |holds(inprogr(moving),3)|) (not |hold_s(inprogr(moving),3)|)))
(assert (or (not |hold_s(running,2)|) |occurs(end(moving),1)|))
(assert (or (not |hold_s(running,3)|) |occurs(end(moving),2)|))
(assert (or (not |required(ezcsp__lt(v(v,0),4))|) |occurs(accelerate,0)|))
(assert (or (not |required(ezcsp__lt(v(v,1),4))|) |occurs(accelerate,1)|))
(assert (or (not |required(ezcsp__lt(v(v,2),4))|) |occurs(accelerate,2)|))
(assert (or (not |required(ezcsp__lt(v(v,3),4))|) |occurs(accelerate,3)|))
(assert (or (not |required(ezcsp__eq(v(v,1),ezcsp__pl(v(v,0),1)))|) |occurs(accelerate,0)|))
(assert (or (not |required(ezcsp__eq(v(v,2),ezcsp__pl(v(v,1),1)))|) |occurs(accelerate,1)|))
(assert (or (not |required(ezcsp__eq(v(v,3),ezcsp__pl(v(v,2),1)))|) |occurs(accelerate,2)|))
(assert (or (not |ab(v,0)|) |occurs(accelerate,0)| |occurs(decelerate,0)|))
(assert (or (not |ab(v,1)|) |occurs(accelerate,1)| |occurs(decelerate,1)|))
(assert (or (not |ab(v,2)|) |occurs(accelerate,2)| |occurs(decelerate,2)|))
(assert (or (not |ab(v,3)|) |occurs(accelerate,3)| |occurs(decelerate,3)|))
(assert (or (not |required(ezcsp__gt(v(v,0),0))|) |occurs(decelerate,0)|))
(assert (or (not |required(ezcsp__gt(v(v,1),0))|) |occurs(decelerate,1)|))
(assert (or (not |required(ezcsp__gt(v(v,2),0))|) |occurs(decelerate,2)|))
(assert (or (not |required(ezcsp__gt(v(v,3),0))|) |occurs(decelerate,3)|))
(assert (or (not |required(ezcsp__eq(v(v,1),ezcsp__mn(v(v,0),1)))|) |occurs(decelerate,0)|))
(assert (or (not |required(ezcsp__eq(v(v,2),ezcsp__mn(v(v,1),1)))|) |occurs(decelerate,1)|))
(assert (or (not |required(ezcsp__eq(v(v,3),ezcsp__mn(v(v,2),1)))|) |occurs(decelerate,2)|))
(assert (or (not |required(ezcsp__eq(v(v,1),v(v,0)))|) (not |ab(v,0)|)))
(assert (or (not |required(ezcsp__eq(v(v,2),v(v,1)))|) (not |ab(v,1)|)))
(assert (or (not |required(ezcsp__eq(v(v,3),v(v,2)))|) (not |ab(v,2)|)))
(assert (or (not |required(ezcsp__eq(v_final(d,1),30))|) |occurs(end(moving),1)|))
(assert (or (not |required(ezcsp__eq(v_final(d,2),30))|) |occurs(end(moving),2)|))
(assert (or (not |required(ezcsp__eq(v(v,1),0))|) |occurs(end(moving),1)|))
(assert (or (not |required(ezcsp__eq(v(v,2),0))|) |occurs(end(moving),2)|))
(assert (or (not |cspvar(adur(moving),0,30)|) |occurs(end(moving),1)| |occurs(end(moving),2)|))
(assert (or (not |required(ezcsp__eq(adur(moving),ezcsp__mn(end(1),end(0))))|) |occurs(end(moving),1)|))
(assert (or (not |required(ezcsp__eq(adur(moving),ezcsp__mn(end(2),end(0))))|) |occurs(end(moving),2)|))
(assert (or (not |instoccurs(iact(accelerate,0),0)|) |occurs(accelerate,0)|))
(assert (or (not |instoccurs(iact(accelerate,1),1)|) |occurs(accelerate,1)|))
(assert (or (not |instoccurs(iact(accelerate,2),2)|) |occurs(accelerate,2)|))
(assert (or (not |instoccurs(iact(accelerate,3),3)|) |occurs(accelerate,3)|))
(assert (or (not |instoccurs(iact(decelerate,0),0)|) |occurs(decelerate,0)|))
(assert (or (not |instoccurs(iact(decelerate,1),1)|) |occurs(decelerate,1)|))
(assert (or (not |instoccurs(iact(decelerate,2),2)|) |occurs(decelerate,2)|))
(assert (or (not |instoccurs(iact(decelerate,3),3)|) |occurs(decelerate,3)|))
(assert (or (not |cspvar(adur(iact(accelerate,0)),0,30)|) |occurs(accelerate,0)|))
(assert (or (not |cspvar(adur(iact(accelerate,1)),0,30)|) |occurs(accelerate,1)|))
(assert (or (not |cspvar(adur(iact(accelerate,2)),0,30)|) |occurs(accelerate,2)|))
(assert (or (not |cspvar(adur(iact(accelerate,3)),0,30)|) |occurs(accelerate,3)|))
(assert (or (not |cspvar(adur(iact(decelerate,0)),0,30)|) |occurs(decelerate,0)|))
(assert (or (not |cspvar(adur(iact(decelerate,1)),0,30)|) |occurs(decelerate,1)|))
(assert (or (not |cspvar(adur(iact(decelerate,2)),0,30)|) |occurs(decelerate,2)|))
(assert (or (not |cspvar(adur(iact(decelerate,3)),0,30)|) |occurs(decelerate,3)|))
(assert (or (not |cspvar(stime(iact(accelerate,0)),0,30)|) |occurs(accelerate,0)|))
(assert (or (not |cspvar(stime(iact(accelerate,1)),0,30)|) |occurs(accelerate,1)|))
(assert (or (not |cspvar(stime(iact(accelerate,2)),0,30)|) |occurs(accelerate,2)|))
(assert (or (not |cspvar(stime(iact(accelerate,3)),0,30)|) |occurs(accelerate,3)|))
(assert (or (not |cspvar(stime(iact(decelerate,0)),0,30)|) |occurs(decelerate,0)|))
(assert (or (not |cspvar(stime(iact(decelerate,1)),0,30)|) |occurs(decelerate,1)|))
(assert (or (not |cspvar(stime(iact(decelerate,2)),0,30)|) |occurs(decelerate,2)|))
(assert (or (not |cspvar(stime(iact(decelerate,3)),0,30)|) |occurs(decelerate,3)|))
(assert (or (not |required(ezcsp__eq(adur(iact(accelerate,0)),0))|) |occurs(accelerate,0)|))
(assert (or (not |required(ezcsp__eq(adur(iact(accelerate,1)),0))|) |occurs(accelerate,1)|))
(assert (or (not |required(ezcsp__eq(adur(iact(accelerate,2)),0))|) |occurs(accelerate,2)|))
(assert (or (not |required(ezcsp__eq(adur(iact(accelerate,3)),0))|) |occurs(accelerate,3)|))
(assert (or (not |required(ezcsp__eq(adur(iact(decelerate,0)),0))|) |occurs(decelerate,0)|))
(assert (or (not |required(ezcsp__eq(adur(iact(decelerate,1)),0))|) |occurs(decelerate,1)|))
(assert (or (not |required(ezcsp__eq(adur(iact(decelerate,2)),0))|) |occurs(decelerate,2)|))
(assert (or (not |required(ezcsp__eq(adur(iact(decelerate,3)),0))|) |occurs(decelerate,3)|))
(assert (or (not |required(ezcsp__eq(stime(iact(accelerate,0)),end(0)))|) |occurs(accelerate,0)|))
(assert (or (not |required(ezcsp__eq(stime(iact(accelerate,1)),end(1)))|) |occurs(accelerate,1)|))
(assert (or (not |required(ezcsp__eq(stime(iact(accelerate,2)),end(2)))|) |occurs(accelerate,2)|))
(assert (or (not |required(ezcsp__eq(stime(iact(accelerate,3)),end(3)))|) |occurs(accelerate,3)|))
(assert (or (not |required(ezcsp__eq(stime(iact(decelerate,0)),end(0)))|) |occurs(decelerate,0)|))
(assert (or (not |required(ezcsp__eq(stime(iact(decelerate,1)),end(1)))|) |occurs(decelerate,1)|))
(assert (or (not |required(ezcsp__eq(stime(iact(decelerate,2)),end(2)))|) |occurs(decelerate,2)|))
(assert (or (not |required(ezcsp__eq(stime(iact(decelerate,3)),end(3)))|) |occurs(decelerate,3)|))
(assert (or (not |164|) |occurs(end(moving),1)| |occurs(accelerate,1)| |occurs(decelerate,1)|))
(assert (or (not |165|) |occurs(end(moving),2)| |occurs(accelerate,2)| |occurs(decelerate,2)|))
(assert (or (not |166|) |occurs(accelerate,3)| |occurs(decelerate,3)|))
(assert (or (not |some_action(1)|) |164|))
(assert (or (not |some_action(2)|) |165|))
(assert (or (not |some_action(3)|) |166|))
(assert (or (not |171|) |occurs(end(moving),1)| |occurs(end(moving),2)|))
(assert (or (not |172|) |171|))
(assert |cspdomain(fd)|)
(assert |duration(moving,30)|)
(assert |uplimit(4)|)
(assert |downlimit(0)|)
(assert |required(ezcsp__eq(start(0),0))|)
(assert |required(ezcsp__eq(v_initial(d,0),0))|)
(assert |required(ezcsp__eq(v(v,0),0))|)
(assert |hold_s(inprogr(moving),0)|)
(assert |holds(running,0)|)
(assert |action(accelerate)|)
(assert |instantaneous(accelerate)|)
(assert |action(decelerate)|)
(assert |instantaneous(decelerate)|)
(assert |fluent(inprogr(moving))|)
(assert |cspvar(stime(moving),0,1000)|)
(assert |required(ezcsp__geq(stime(moving),0))|)
(assert |action(start(moving))|)
(assert |action(end(moving))|)
(assert |step(0)|)
(assert |step(1)|)
(assert |step(2)|)
(assert |step(3)|)
(assert |maxintval(30)|)
(assert |occurs(start(moving),0)|)
(assert |holds(inprogr(moving),1)|)
(assert (not |34|))
(assert |cspvar(start(0),0,1000)|)
(assert |cspvar(start(1),0,1000)|)
(assert |cspvar(start(2),0,1000)|)
(assert |cspvar(start(3),0,1000)|)
(assert |required(ezcsp__geq(start(0),0))|)
(assert |required(ezcsp__geq(start(1),0))|)
(assert |required(ezcsp__geq(start(2),0))|)
(assert |required(ezcsp__geq(start(3),0))|)
(assert |cspvar(end(0),0,1000)|)
(assert |cspvar(end(1),0,1000)|)
(assert |cspvar(end(2),0,1000)|)
(assert |cspvar(end(3),0,1000)|)
(assert |required(ezcsp__geq(end(0),0))|)
(assert |required(ezcsp__geq(end(1),0))|)
(assert |required(ezcsp__geq(end(2),0))|)
(assert |required(ezcsp__geq(end(3),0))|)
(assert |cspvar(v(v,0),0,1000)|)
(assert |cspvar(v(v,1),0,1000)|)
(assert |cspvar(v(v,2),0,1000)|)
(assert |cspvar(v(v,3),0,1000)|)
(assert |required(ezcsp__eq(start(1),end(0)))|)
(assert |required(ezcsp__eq(start(2),end(1)))|)
(assert |required(ezcsp__eq(start(3),end(2)))|)
(assert |required(ezcsp__geq(end(0),start(0)))|)
(assert |required(ezcsp__geq(end(1),start(1)))|)
(assert |required(ezcsp__geq(end(2),start(2)))|)
(assert |required(ezcsp__geq(end(3),start(3)))|)
(assert |cspvar(v_initial(d,0),0,1000)|)
(assert |cspvar(v_initial(d,1),0,1000)|)
(assert |cspvar(v_initial(d,2),0,1000)|)
(assert |cspvar(v_initial(d,3),0,1000)|)
(assert |cspvar(v_final(d,0),0,1000)|)
(assert |cspvar(v_final(d,1),0,1000)|)
(assert |cspvar(v_final(d,2),0,1000)|)
(assert |cspvar(v_final(d,3),0,1000)|)
(assert |required(ezcsp__eq(v_initial(d,1),v_final(d,0)))|)
(assert |required(ezcsp__eq(v_initial(d,2),v_final(d,1)))|)
(assert |required(ezcsp__eq(v_initial(d,3),v_final(d,2)))|)
(assert |required(ezcsp__eq(v_final(d,0),ezcsp__pl(v_initial(d,0),ezcsp__tm(ezcsp__mn(end(0),start(0)),v(v,0)))))|)
(assert |required(ezcsp__eq(v_final(d,1),ezcsp__pl(v_initial(d,1),ezcsp__tm(ezcsp__mn(end(1),start(1)),v(v,1)))))|)
(assert |required(ezcsp__eq(v_final(d,2),ezcsp__pl(v_initial(d,2),ezcsp__tm(ezcsp__mn(end(2),start(2)),v(v,2)))))|)
(assert |required(ezcsp__eq(v_final(d,3),ezcsp__pl(v_initial(d,3),ezcsp__tm(ezcsp__mn(end(3),start(3)),v(v,3)))))|)
(assert |required(ezcsp__eq(stime(moving),end(0)))|)
(assert |maction(moving)|)
(assert |cspvar(dur(0),0,30)|)
(assert |cspvar(dur(1),0,30)|)
(assert |cspvar(dur(2),0,30)|)
(assert |cspvar(dur(3),0,30)|)
(assert |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))|)
(assert |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))|)
(assert |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))|)
(assert |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))|)
(assert |163|)
(assert |164|)
(assert |165|)
(assert |some_action(0)|)
(assert |some_action(1)|)
(assert |some_action(2)|)
(assert |171|)
(assert |172|)
(assert |173|)
(assert |174|)
(assert |175|)
(assert |176|)
(assert |177|)
(declare-fun |stime(moving)| () Int)
(assert (<= 0 |stime(moving)|))
(assert (>= 1000 |stime(moving)|))

(declare-fun |adur(iact(decelerate,3))| () Int)
(assert (<= 0 |adur(iact(decelerate,3))|))
(assert (>= 30 |adur(iact(decelerate,3))|))

(declare-fun |stime(iact(accelerate,2))| () Int)
(assert (<= 0 |stime(iact(accelerate,2))|))
(assert (>= 30 |stime(iact(accelerate,2))|))

(declare-fun |stime(iact(accelerate,1))| () Int)
(assert (<= 0 |stime(iact(accelerate,1))|))
(assert (>= 30 |stime(iact(accelerate,1))|))

(declare-fun |adur(iact(decelerate,0))| () Int)
(assert (<= 0 |adur(iact(decelerate,0))|))
(assert (>= 30 |adur(iact(decelerate,0))|))

(declare-fun |stime(iact(decelerate,1))| () Int)
(assert (<= 0 |stime(iact(decelerate,1))|))
(assert (>= 30 |stime(iact(decelerate,1))|))

(declare-fun |v_initial(d,0)| () Int)
(assert (<= 0 |v_initial(d,0)|))
(assert (>= 1000 |v_initial(d,0)|))

(declare-fun |dur(0)| () Int)
(assert (<= 0 |dur(0)|))
(assert (>= 30 |dur(0)|))

(declare-fun |v_final(d,1)| () Int)
(assert (<= 0 |v_final(d,1)|))
(assert (>= 1000 |v_final(d,1)|))

(declare-fun |start(2)| () Int)
(assert (<= 0 |start(2)|))
(assert (>= 1000 |start(2)|))

(declare-fun |stime(iact(accelerate,0))| () Int)
(assert (<= 0 |stime(iact(accelerate,0))|))
(assert (>= 30 |stime(iact(accelerate,0))|))

(declare-fun |adur(iact(decelerate,1))| () Int)
(assert (<= 0 |adur(iact(decelerate,1))|))
(assert (>= 30 |adur(iact(decelerate,1))|))

(declare-fun |stime(iact(decelerate,2))| () Int)
(assert (<= 0 |stime(iact(decelerate,2))|))
(assert (>= 30 |stime(iact(decelerate,2))|))

(declare-fun |adur(iact(accelerate,1))| () Int)
(assert (<= 0 |adur(iact(accelerate,1))|))
(assert (>= 30 |adur(iact(accelerate,1))|))

(declare-fun |dur(3)| () Int)
(assert (<= 0 |dur(3)|))
(assert (>= 30 |dur(3)|))

(declare-fun |stime(iact(decelerate,3))| () Int)
(assert (<= 0 |stime(iact(decelerate,3))|))
(assert (>= 30 |stime(iact(decelerate,3))|))

(declare-fun |adur(iact(decelerate,2))| () Int)
(assert (<= 0 |adur(iact(decelerate,2))|))
(assert (>= 30 |adur(iact(decelerate,2))|))

(declare-fun |stime(iact(accelerate,3))| () Int)
(assert (<= 0 |stime(iact(accelerate,3))|))
(assert (>= 30 |stime(iact(accelerate,3))|))

(declare-fun |end(0)| () Int)
(assert (<= 0 |end(0)|))
(assert (>= 1000 |end(0)|))

(declare-fun |end(3)| () Int)
(assert (<= 0 |end(3)|))
(assert (>= 1000 |end(3)|))

(declare-fun |v_initial(d,2)| () Int)
(assert (<= 0 |v_initial(d,2)|))
(assert (>= 1000 |v_initial(d,2)|))

(declare-fun |start(3)| () Int)
(assert (<= 0 |start(3)|))
(assert (>= 1000 |start(3)|))

(declare-fun |adur(iact(accelerate,0))| () Int)
(assert (<= 0 |adur(iact(accelerate,0))|))
(assert (>= 30 |adur(iact(accelerate,0))|))

(declare-fun |v_final(d,3)| () Int)
(assert (<= 0 |v_final(d,3)|))
(assert (>= 1000 |v_final(d,3)|))

(declare-fun |v(v,0)| () Int)
(assert (<= 0 |v(v,0)|))
(assert (>= 1000 |v(v,0)|))

(declare-fun |adur(moving)| () Int)
(assert (<= 0 |adur(moving)|))
(assert (>= 30 |adur(moving)|))

(declare-fun |v(v,1)| () Int)
(assert (<= 0 |v(v,1)|))
(assert (>= 1000 |v(v,1)|))

(declare-fun |v_initial(d,3)| () Int)
(assert (<= 0 |v_initial(d,3)|))
(assert (>= 1000 |v_initial(d,3)|))

(declare-fun |adur(iact(accelerate,2))| () Int)
(assert (<= 0 |adur(iact(accelerate,2))|))
(assert (>= 30 |adur(iact(accelerate,2))|))

(declare-fun |end(2)| () Int)
(assert (<= 0 |end(2)|))
(assert (>= 1000 |end(2)|))

(declare-fun |dur(2)| () Int)
(assert (<= 0 |dur(2)|))
(assert (>= 30 |dur(2)|))

(declare-fun |start(0)| () Int)
(assert (<= 0 |start(0)|))
(assert (>= 1000 |start(0)|))

(declare-fun |v(v,3)| () Int)
(assert (<= 0 |v(v,3)|))
(assert (>= 1000 |v(v,3)|))

(declare-fun |v_final(d,2)| () Int)
(assert (<= 0 |v_final(d,2)|))
(assert (>= 1000 |v_final(d,2)|))

(declare-fun |adur(iact(accelerate,3))| () Int)
(assert (<= 0 |adur(iact(accelerate,3))|))
(assert (>= 30 |adur(iact(accelerate,3))|))

(declare-fun |stime(iact(decelerate,0))| () Int)
(assert (<= 0 |stime(iact(decelerate,0))|))
(assert (>= 30 |stime(iact(decelerate,0))|))

(declare-fun |start(1)| () Int)
(assert (<= 0 |start(1)|))
(assert (>= 1000 |start(1)|))

(declare-fun |v(v,2)| () Int)
(assert (<= 0 |v(v,2)|))
(assert (>= 1000 |v(v,2)|))

(declare-fun |v_final(d,0)| () Int)
(assert (<= 0 |v_final(d,0)|))
(assert (>= 1000 |v_final(d,0)|))

(declare-fun |dur(1)| () Int)
(assert (<= 0 |dur(1)|))
(assert (>= 30 |dur(1)|))

(declare-fun |v_initial(d,1)| () Int)
(assert (<= 0 |v_initial(d,1)|))
(assert (>= 1000 |v_initial(d,1)|))

(declare-fun |end(1)| () Int)
(assert (<= 0 |end(1)|))
(assert (>= 1000 |end(1)|))

(assert (=> |required(ezcsp__eq(adur(iact(decelerate,0)),0))| (= |adur(iact(decelerate,0))|  0)))
(assert (=> |required(ezcsp__lt(v(v,0),4))| (< |v(v,0)|  4)))
(assert (=> |required(ezcsp__eq(stime(iact(accelerate,2)),end(2)))| (= |stime(iact(accelerate,2))|  |end(2)| )))
(assert (=> |required(ezcsp__eq(stime(iact(decelerate,2)),end(2)))| (= |stime(iact(decelerate,2))|  |end(2)| )))
(assert (=> |required(ezcsp__geq(stime(moving),0))| (>= |stime(moving)|  0)))
(assert (=> |required(ezcsp__geq(end(2),start(2)))| (>= |end(2)|  |start(2)| )))
(assert (=> |required(ezcsp__eq(v(v,2),ezcsp__mn(v(v,1),1)))| (= |v(v,2)| (- |v(v,1)|  1))))
(assert (=> |required(ezcsp__geq(end(1),0))| (>= |end(1)|  0)))
(assert (=> |required(ezcsp__eq(adur(iact(accelerate,0)),0))| (= |adur(iact(accelerate,0))|  0)))
(assert (=> |required(ezcsp__eq(v(v,1),ezcsp__mn(v(v,0),1)))| (= |v(v,1)| (- |v(v,0)|  1))))
(assert (=> |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))| (= |dur(0)| (- |end(0)|  |start(0)| ))))
(assert (=> |required(ezcsp__eq(v(v,1),0))| (= |v(v,1)|  0)))
(assert (=> |required(ezcsp__eq(v_final(d,1),30))| (= |v_final(d,1)|  30)))
(assert (=> |required(ezcsp__eq(v(v,0),0))| (= |v(v,0)|  0)))
(assert (=> |required(ezcsp__geq(end(0),start(0)))| (>= |end(0)|  |start(0)| )))
(assert (=> |required(ezcsp__eq(v_final(d,1),ezcsp__pl(v_initial(d,1),ezcsp__tm(ezcsp__mn(end(1),start(1)),v(v,1)))))| (= |v_final(d,1)| (+ |v_initial(d,1)| (*(- |end(1)|  |start(1)| ) |v(v,1)| )))))
(assert (=> |required(ezcsp__eq(v_final(d,3),ezcsp__pl(v_initial(d,3),ezcsp__tm(ezcsp__mn(end(3),start(3)),v(v,3)))))| (= |v_final(d,3)| (+ |v_initial(d,3)| (*(- |end(3)|  |start(3)| ) |v(v,3)| )))))
(assert (=> |required(ezcsp__eq(v_initial(d,3),v_final(d,2)))| (= |v_initial(d,3)|  |v_final(d,2)| )))
(assert (=> |required(ezcsp__eq(adur(moving),ezcsp__mn(end(2),end(0))))| (= |adur(moving)| (- |end(2)|  |end(0)| ))))
(assert (=> |required(ezcsp__eq(adur(iact(accelerate,3)),0))| (= |adur(iact(accelerate,3))|  0)))
(assert (=> |required(ezcsp__geq(end(3),0))| (>= |end(3)|  0)))
(assert (=> |required(ezcsp__geq(start(3),0))| (>= |start(3)|  0)))
(assert (=> |required(ezcsp__eq(stime(iact(accelerate,1)),end(1)))| (= |stime(iact(accelerate,1))|  |end(1)| )))
(assert (=> |required(ezcsp__eq(adur(iact(decelerate,3)),0))| (= |adur(iact(decelerate,3))|  0)))
(assert (=> |required(ezcsp__gt(v(v,3),0))| (> |v(v,3)|  0)))
(assert (=> |required(ezcsp__eq(stime(iact(accelerate,3)),end(3)))| (= |stime(iact(accelerate,3))|  |end(3)| )))
(assert (=> |required(ezcsp__eq(v_final(d,2),30))| (= |v_final(d,2)|  30)))
(assert (=> |required(ezcsp__eq(v(v,3),ezcsp__pl(v(v,2),1)))| (= |v(v,3)| (+ |v(v,2)|  1))))
(assert (=> |required(ezcsp__eq(v(v,1),v(v,0)))| (= |v(v,1)|  |v(v,0)| )))
(assert (=> |required(ezcsp__eq(v(v,2),0))| (= |v(v,2)|  0)))
(assert (=> |required(ezcsp__eq(adur(moving),ezcsp__mn(end(1),end(0))))| (= |adur(moving)| (- |end(1)|  |end(0)| ))))
(assert (=> |required(ezcsp__eq(start(0),0))| (= |start(0)|  0)))
(assert (=> |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))| (= |dur(3)| (- |end(3)|  |start(3)| ))))
(assert (=> |required(ezcsp__geq(start(1),0))| (>= |start(1)|  0)))
(assert (=> |required(ezcsp__eq(v_initial(d,0),0))| (= |v_initial(d,0)|  0)))
(assert (=> |required(ezcsp__eq(adur(iact(decelerate,1)),0))| (= |adur(iact(decelerate,1))|  0)))
(assert (=> |required(ezcsp__lt(v(v,1),4))| (< |v(v,1)|  4)))
(assert (=> |required(ezcsp__eq(stime(moving),end(0)))| (= |stime(moving)|  |end(0)| )))
(assert (=> |required(ezcsp__eq(stime(iact(decelerate,1)),end(1)))| (= |stime(iact(decelerate,1))|  |end(1)| )))
(assert (=> |required(ezcsp__lt(v(v,3),4))| (< |v(v,3)|  4)))
(assert (=> |required(ezcsp__eq(v(v,3),ezcsp__mn(v(v,2),1)))| (= |v(v,3)| (- |v(v,2)|  1))))
(assert (=> |required(ezcsp__lt(v(v,2),4))| (< |v(v,2)|  4)))
(assert (=> |required(ezcsp__geq(end(2),0))| (>= |end(2)|  0)))
(assert (=> |required(ezcsp__eq(adur(iact(accelerate,1)),0))| (= |adur(iact(accelerate,1))|  0)))
(assert (=> |required(ezcsp__eq(v(v,2),ezcsp__pl(v(v,1),1)))| (= |v(v,2)| (+ |v(v,1)|  1))))
(assert (=> |required(ezcsp__gt(v(v,2),0))| (> |v(v,2)|  0)))
(assert (=> |required(ezcsp__gt(v(v,0),0))| (> |v(v,0)|  0)))
(assert (=> |required(ezcsp__eq(adur(iact(decelerate,2)),0))| (= |adur(iact(decelerate,2))|  0)))
(assert (=> |required(ezcsp__geq(end(3),start(3)))| (>= |end(3)|  |start(3)| )))
(assert (=> |required(ezcsp__eq(v_initial(d,2),v_final(d,1)))| (= |v_initial(d,2)|  |v_final(d,1)| )))
(assert (=> |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))| (= |dur(2)| (- |end(2)|  |start(2)| ))))
(assert (=> |required(ezcsp__eq(v_final(d,0),ezcsp__pl(v_initial(d,0),ezcsp__tm(ezcsp__mn(end(0),start(0)),v(v,0)))))| (= |v_final(d,0)| (+ |v_initial(d,0)| (*(- |end(0)|  |start(0)| ) |v(v,0)| )))))
(assert (=> |required(ezcsp__geq(start(2),0))| (>= |start(2)|  0)))
(assert (=> |required(ezcsp__geq(end(1),start(1)))| (>= |end(1)|  |start(1)| )))
(assert (=> |required(ezcsp__eq(start(1),end(0)))| (= |start(1)|  |end(0)| )))
(assert (=> |required(ezcsp__eq(v_initial(d,1),v_final(d,0)))| (= |v_initial(d,1)|  |v_final(d,0)| )))
(assert (=> |required(ezcsp__eq(v_final(d,2),ezcsp__pl(v_initial(d,2),ezcsp__tm(ezcsp__mn(end(2),start(2)),v(v,2)))))| (= |v_final(d,2)| (+ |v_initial(d,2)| (*(- |end(2)|  |start(2)| ) |v(v,2)| )))))
(assert (=> |required(ezcsp__geq(start(0),0))| (>= |start(0)|  0)))
(assert (=> |required(ezcsp__gt(v(v,1),0))| (> |v(v,1)|  0)))
(assert (=> |required(ezcsp__eq(start(3),end(2)))| (= |start(3)|  |end(2)| )))
(assert (=> |required(ezcsp__eq(v(v,3),v(v,2)))| (= |v(v,3)|  |v(v,2)| )))
(assert (=> |required(ezcsp__eq(stime(iact(decelerate,3)),end(3)))| (= |stime(iact(decelerate,3))|  |end(3)| )))
(assert (=> |required(ezcsp__geq(end(0),0))| (>= |end(0)|  0)))
(assert (=> |required(ezcsp__eq(stime(iact(decelerate,0)),end(0)))| (= |stime(iact(decelerate,0))|  |end(0)| )))
(assert (=> |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))| (= |dur(1)| (- |end(1)|  |start(1)| ))))
(assert (=> |required(ezcsp__eq(stime(iact(accelerate,0)),end(0)))| (= |stime(iact(accelerate,0))|  |end(0)| )))
(assert (=> |required(ezcsp__eq(start(2),end(1)))| (= |start(2)|  |end(1)| )))
(assert (=> |required(ezcsp__eq(v(v,1),ezcsp__pl(v(v,0),1)))| (= |v(v,1)| (+ |v(v,0)|  1))))
(assert (=> |required(ezcsp__eq(v(v,2),v(v,1)))| (= |v(v,2)|  |v(v,1)| )))
(assert (=> |required(ezcsp__eq(adur(iact(accelerate,2)),0))| (= |adur(iact(accelerate,2))|  0)))

; Check satisfiability
(check-sat)
(exit)
