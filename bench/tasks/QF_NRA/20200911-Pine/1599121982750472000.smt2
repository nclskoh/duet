(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: Z3

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   u' := u + 0.01 * v + rndu0
   v' := v + 0.01 * (-0.5 * v - 9.81 * u) + rndv0

 Input ranges:
   u in [0.0,0.0]
   v in [2.0,3.0]
   rndu0 in [-6.4e-08,6.4e-08]
   rndv0 in [-2.8e-07,2.8e-07]

 Invariant:
   -0.11*u + 1.0*u^2 + 0.04*u*v + 0.1*v^2 <= 1.64
 and
   u in [-1.3,1.4]
   v in [-4.1,4.1]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun u () Real)
(declare-fun v () Real)
(declare-fun rndu0 () Real)
(declare-fun rndv0 () Real)
(declare-fun u! () Real)
(declare-fun v! () Real)
(assert
 (<= (- (/ 13.0 10.0)) u))
(assert
 (>= (/ 7.0 5.0) u))
(assert
 (<= (- (/ 41.0 10.0)) v))
(assert
 (>= (/ 41.0 10.0) v))
(assert
 (<= (- (/ 1.0 15625000.0)) rndu0))
(assert
 (>= (/ 1.0 15625000.0) rndu0))
(assert
 (<= (- (/ 7.0 25000000.0)) rndv0))
(assert
 (>= (/ 7.0 25000000.0) rndv0))
(assert
 (let ((?x93 (* (- (/ 11.0 100.0)) u)))
 (let ((?x273 (* u u)))
 (>= (/ 41.0 25.0) (+ ?x273 (* (/ 1.0 25.0) (* u v)) (* (/ 1.0 10.0) (* v v)) ?x93)))))
(assert
 (= u! (+ u (* (/ 1.0 100.0) v) rndu0)))
(assert
 (= v! (+ (* (/ 199.0 200.0) v) (* (- (/ 981.0 10000.0)) u) rndv0)))
(assert
 (let ((?x217 (* (- (/ 11.0 100.0)) u!)))
 (let ((?x174 (* u! u!)))
 (let (($x247 (>= (/ 41.0 25.0) (+ ?x174 (* (/ 1.0 25.0) (* u! v!)) (* (/ 1.0 10.0) (* v! v!)) ?x217))))
 (let (($x230 (>= (/ 41.0 10.0) v!)))
 (let (($x231 (<= (- (/ 41.0 10.0)) v!)))
 (let (($x109 (>= (/ 7.0 5.0) u!)))
 (let (($x65 (<= (- (/ 13.0 10.0)) u!)))
 (not (and $x65 $x109 $x231 $x230 $x247))))))))))
(check-sat)
(exit)
