(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: Z3

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   x1' := x1 + 0.01 * x2
   x2' := -0.01 * x1 + 0.99 * x2

 Input ranges:
   x1 in [0.0,1.0]
   x2 in [0.0,1.0]

 Invariant:
   -1.0*x1 + -0.32*x2 + 0.86*x1^2 + 0.19*x1*x2 + 0.68*x2^2 <= 0.49
 and
   x1 in [-0.4,1.4]
   x2 in [-0.9,1.0]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x1! () Real)
(declare-fun x2! () Real)
(declare-fun x2 () Real)
(declare-fun x1 () Real)
(assert
 (let ((?x52 (+ (* (* (/ 19.0 100.0) x1!) x2!) (+ (* (* (/ 17.0 25.0) x2!) x2!) (* (- 1.0) x1!)))))
 (let ((?x7 (* (- (/ 8.0 25.0)) x2!)))
 (let (($x87 (and (<= (- (/ 2.0 5.0)) x1!) (>= (/ 7.0 5.0) x1!) (<= (- (/ 9.0 10.0)) x2!) (>= 1.0 x2!))))
 (let (($x38 (and $x87 (>= (/ 49.0 100.0) (+ ?x7 (+ (* (* (/ 43.0 50.0) x1!) x1!) ?x52))) )))
 (let (($x217 (and (= x1! (+ x1 (* (/ 1.0 100.0) x2))) (= x2! (+ (* (- (/ 1.0 100.0)) x1) (* (/ 99.0 100.0) x2))))))
 (let ((?x209 (+ (* (* (/ 19.0 100.0) x1) x2) (+ (* (* (/ 17.0 25.0) x2) x2) (* (- 1.0) x1)))))
 (let (($x35 (>= 1.0 x2)))
 (let (($x165 (and (and (<= (- (/ 2.0 5.0)) x1) (>= (/ 7.0 5.0) x1) (<= (- (/ 9.0 10.0)) x2) $x35) (>= (/ 49.0 100.0) (+ (* (- (/ 8.0 25.0)) x2) (+ (* (* (/ 43.0 50.0) x1) x1) ?x209))) )))
 (and $x165 $x217 (not $x38)))))))))))
(check-sat)
(exit)
