(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Anastasiia Izycheva, Eva Darulova
Generated on: 2020-09-11
Generator: Pine (using Z3 Python API)
Application: Check inductiveness of a loop invariant
Target solver: Z3

These benchmarks were generated while developing the tool Pine [1], which uses
CVC4/Z3 to check inductiveness of invariants. The work is described in [2].

[1] https://github.com/izycheva/pine
[2] A.Izycheva, E.Darulova, H.Seidl, SAS'20, "Counterexample- and Simulation-Guided Floating-Point Loop Invariant Synthesis"

 Loop:
   x' := x + 0.01 * (-2*x - 3*y + x*x)
   y' := y + 0.01 * (x + y)

 Input ranges:
   x in [0.0,0.1]
   y in [0.0,0.1]

 Invariant:
   -0.03*x + -0.14*y + 0.34*x^2 + 0.63*x*y + 1.0*y^2 <= 0.01
 and
   x in [-0.3,0.1]
   y in [-0.1,0.2]

 Query: Loop and Invariant and not Invariant'
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x! () Real)
(declare-fun y! () Real)
(declare-fun y () Real)
(declare-fun x () Real)
(assert
 (let ((?x60 (+ (* (* (/ 63.0 100.0) x!) y!) (+ (* (* 1.0 y!) y!) (* (- (/ 3.0 100.0)) x!)))))
 (let (($x64 (and (<= (- (/ 3.0 10.0)) x!) (>= (/ 1.0 10.0) x!) (<= (- (/ 1.0 10.0)) y!) (>= (/ 1.0 5.0) y!))))
 (let (($x65 (and $x64 (>= (/ 1.0 100.0) (+ (* (- (/ 7.0 50.0)) y!) (+ (* (* (/ 17.0 50.0) x!) x!) ?x60))) )))
 (let ((?x75 (+ x (* (/ 1.0 100.0) (+ (- (* (- 2.0) x) (* 3.0 y)) (* x x))))))
 (let ((?x37 (+ (* (* (/ 63.0 100.0) x) y) (+ (* (* 1.0 y) y) (* (- (/ 3.0 100.0)) x)))))
 (let (($x13 (>= (/ 1.0 10.0) x)))
 (let (($x44 (and (and (<= (- (/ 3.0 10.0)) x) $x13 (<= (- (/ 1.0 10.0)) y) (>= (/ 1.0 5.0) y)) (>= (/ 1.0 100.0) (+ (* (- (/ 7.0 50.0)) y) (+ (* (* (/ 17.0 50.0) x) x) ?x37))) )))
 (and $x44 (and (= x! ?x75) (= y! (+ y (* (/ 1.0 100.0) (+ x y))))) (not $x65))))))))))
(check-sat)
(exit)
