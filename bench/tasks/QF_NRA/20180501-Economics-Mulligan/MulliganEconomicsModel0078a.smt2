(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Casey Mulligan, Russell Bradford, James H. Davenport, Matthew England, and ZakTonks
Generated on: 2018-04-19
Generator: TheoryGuru
Application: Vector mode: Hicks' generalized law of demand, assumption set
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)

; Code written by TheoryGuru
; Mulligan model #0078
;   is part of the example library included in "Quantifier Elimination for Reasoning in Economics" April 2018
;   by Mulligan, Bradford, Davenport, England, and Tonks
;   available at bathpaper.economicreasoning.com .
; Economics background for this and other examples is provided at examples.economicreasoning.com .

(declare-fun v1 () Real)
(declare-fun v2 () Real)
(declare-fun v3 () Real)
(declare-fun v4 () Real)
(declare-fun v5 () Real)
(declare-fun v6 () Real)
(declare-fun v7 () Real)
(declare-fun v8 () Real)
(declare-fun v9 () Real)
(declare-fun v10 () Real)

; input assumptions
(define-fun assumptions () Bool (and 
(<= v2 v3)
(<= v9 v7)
(>= v1 0)
(>= v5 0)
(>= v8 0)
(>= v10 0)
(>= (* v1 v5) (* v2 v2))
(>= (* v1 v8) (* v3 v3))
(>= (* v1 v10) (* v4 v4))
(>= (* v5 v8) (* v6 v6))
(>= (* v10 v5) (* v7 v7))
(>= (* v10 v8) (* v9 v9))
(>= (+ (* 2 v2 v3 v6) (* v1 v5 v8)) (+ (* (* v3 v3) v5) (* v1 (* v6 v6)) (* (* v2 v2) v8)))
(>= (+ (* v1 v10 v5) (* 2 v2 v4 v7)) (+ (* v10 (* v2 v2)) (* (* v4 v4) v5) (* v1 (* v7 v7))))
(>= (+ (* v1 v10 v8) (* 2 v3 v4 v9)) (+ (* v10 (* v3 v3)) (* (* v4 v4) v8) (* v1 (* v9 v9))))
(>= (+ (* v10 v5 v8) (* 2 v6 v7 v9)) (+ (* v10 (* v6 v6)) (* (* v7 v7) v8) (* v5 (* v9 v9))))
(>= (+ (* 2 v10 v2 v3 v6) (* (* v4 v4) (* v6 v6)) (* (* v3 v3) (* v7 v7)) (* v1 v10 v5 v8) (* 2 v2 v4 v7 v8) (* 2 v3 v4 v5 v9) (* 2 v1 v6 v7 v9) (* (* v2 v2) (* v9 v9))) (+ (* v10 (* v3 v3) v5) (* v1 v10 (* v6 v6)) (* 2 v3 v4 v6 v7) (* v10 (* v2 v2) v8) (* (* v4 v4) v5 v8) (* v1 (* v7 v7) v8) (* 2 v2 v4 v6 v9) (* 2 v2 v3 v7 v9) (* v1 v5 (* v9 v9))))
))

; input hypothesis
(define-fun hypothesis () Bool (<= (+ v2 v9) (+ v3 v7)))

(assert assumptions)
(check-sat) ; confirming that assumptions are not contradictory

(exit)